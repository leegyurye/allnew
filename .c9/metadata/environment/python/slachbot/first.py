{"filter":false,"title":"first.py","tooltip":"/python/slachbot/first.py","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":60,"column":0},"action":"insert","lines":["from slack_sdk import WebClient","import os.path","import json","","BASE_DIR = os.path.dirname(os.path.dirname(os.path.relpath(\"./\")))","secret_file = os.path.join(BASE_DIR, \"../secret.json\")","","with open(secret_file) as f:","    secrets = json.loads(f.read())","","def get_secret(setting, secrets=secrets):","    try:","        return secrets[setting]","    except KeyError:","        errorMsg = \"Set the {} environment variable.\".format(setting)","        return errorMsg","        ","class SlackAPI:","    def __init__(self, token):","        self.client = WebClient(token)","        ","    def get_channel_id(self, channel_name):","        result = self.client.conversations_list()","        channels = result.data['channels']","        channel = list(filter(lambda c: c['name']==channel_name, channels))[0]","        channel_id = channel[\"id\"]","        return channel_id","        ","    def get_message_ts(self, channel_id, query):","        result = self.client.conversations_history(channel=channel_id)","        messages = result.data['messages']","        message = list(filter(lambda m: m[\"text\"]==query, messages))[0]","        message_ts = message[\"ts\"]","        return message_ts","        ","    def post_thread_message(self, channel_id, message_ts, text):","        result = self.client.chat_postMessage(","            channel=channel_id,","            text = text,","            thread_ts = message_ts","            )","        return result","    ","    def post_message(self, channel_id, text):","        result = self.client.chat_postMessage(","            channel = channel_id,","            text = text","        )","        return result","","BotToken = get_secret(\"slack_BotOAuthToken\")","slack = SlackAPI(BotToken)","channel_name = \"프로젝트\"","query = \"슬랙봇 테스트\"","text = \"안녕하세요. 슬랙봇입니다.\"","","channel_id = slack.get_channel_id(channel_name)","message_ts = slack.get_message_ts(channel_id, query)","slack.post_thread_message(channel_id, message_ts, text)","",""],"id":451}],[{"start":{"row":17,"column":0},"end":{"row":60,"column":0},"action":"remove","lines":["class SlackAPI:","    def __init__(self, token):","        self.client = WebClient(token)","        ","    def get_channel_id(self, channel_name):","        result = self.client.conversations_list()","        channels = result.data['channels']","        channel = list(filter(lambda c: c['name']==channel_name, channels))[0]","        channel_id = channel[\"id\"]","        return channel_id","        ","    def get_message_ts(self, channel_id, query):","        result = self.client.conversations_history(channel=channel_id)","        messages = result.data['messages']","        message = list(filter(lambda m: m[\"text\"]==query, messages))[0]","        message_ts = message[\"ts\"]","        return message_ts","        ","    def post_thread_message(self, channel_id, message_ts, text):","        result = self.client.chat_postMessage(","            channel=channel_id,","            text = text,","            thread_ts = message_ts","            )","        return result","    ","    def post_message(self, channel_id, text):","        result = self.client.chat_postMessage(","            channel = channel_id,","            text = text","        )","        return result","","BotToken = get_secret(\"slack_BotOAuthToken\")","slack = SlackAPI(BotToken)","channel_name = \"프로젝트\"","query = \"슬랙봇 테스트\"","text = \"안녕하세요. 슬랙봇입니다.\"","","channel_id = slack.get_channel_id(channel_name)","message_ts = slack.get_message_ts(channel_id, query)","slack.post_thread_message(channel_id, message_ts, text)","",""],"id":452}],[{"start":{"row":16,"column":8},"end":{"row":17,"column":0},"action":"remove","lines":["",""],"id":453}],[{"start":{"row":0,"column":0},"end":{"row":16,"column":8},"action":"remove","lines":["from slack_sdk import WebClient","import os.path","import json","","BASE_DIR = os.path.dirname(os.path.dirname(os.path.relpath(\"./\")))","secret_file = os.path.join(BASE_DIR, \"../secret.json\")","","with open(secret_file) as f:","    secrets = json.loads(f.read())","","def get_secret(setting, secrets=secrets):","    try:","        return secrets[setting]","    except KeyError:","        errorMsg = \"Set the {} environment variable.\".format(setting)","        return errorMsg","        "],"id":454},{"start":{"row":0,"column":0},"end":{"row":60,"column":0},"action":"insert","lines":["from slack_sdk import WebClient","import os.path","import json","","BASE_DIR = os.path.dirname(os.path.dirname(os.path.relpath(\"./\")))","secret_file = os.path.join(BASE_DIR, \"../secret.json\")","","with open(secret_file) as f:","    secrets = json.loads(f.read())","","def get_secret(setting, secrets=secrets):","    try:","        return secrets[setting]","    except KeyError:","        errorMsg = \"Set the {} environment variable.\".format(setting)","        return errorMsg","        ","class SlackAPI:","    def __init__(self, token):","        self.client = WebClient(token)","        ","    def get_channel_id(self, channel_name):","        result = self.client.conversations_list()","        channels = result.data['channels']","        channel = list(filter(lambda c: c['name']==channel_name, channels))[0]","        channel_id = channel[\"id\"]","        return channel_id","        ","    def get_message_ts(self, channel_id, query):","        result = self.client.conversations_history(channel=channel_id)","        messages = result.data['messages']","        message = list(filter(lambda m: m[\"text\"]==query, messages))[0]","        message_ts = message[\"ts\"]","        return message_ts","        ","    def post_thread_message(self, channel_id, message_ts, text):","        result = self.client.chat_postMessage(","            channel=channel_id,","            text = text,","            thread_ts = message_ts","            )","        return result","    ","    def post_message(self, channel_id, text):","        result = self.client.chat_postMessage(","            channel = channel_id,","            text = text","        )","        return result","","BotToken = get_secret(\"slack_BotOAuthToken\")","slack = SlackAPI(BotToken)","channel_name = \"프로젝트\"","query = \"슬랙봇 테스트\"","text = \"안녕하세요. 슬랙봇입니다.\"","","channel_id = slack.get_channel_id(channel_name)","message_ts = slack.get_message_ts(channel_id, query)","slack.post_thread_message(channel_id, message_ts, text)","",""]}],[{"start":{"row":52,"column":16},"end":{"row":52,"column":20},"action":"remove","lines":["프로젝트"],"id":455},{"start":{"row":52,"column":16},"end":{"row":52,"column":17},"action":"insert","lines":["p"]},{"start":{"row":52,"column":17},"end":{"row":52,"column":18},"action":"insert","lines":["r"]},{"start":{"row":52,"column":18},"end":{"row":52,"column":19},"action":"insert","lines":["o"]},{"start":{"row":52,"column":19},"end":{"row":52,"column":20},"action":"insert","lines":["j"]},{"start":{"row":52,"column":20},"end":{"row":52,"column":21},"action":"insert","lines":["e"]},{"start":{"row":52,"column":21},"end":{"row":52,"column":22},"action":"insert","lines":["c"]}],[{"start":{"row":52,"column":22},"end":{"row":52,"column":23},"action":"insert","lines":["t"],"id":456}]]},"ace":{"folds":[],"scrolltop":478,"scrollleft":0,"selection":{"start":{"row":37,"column":26},"end":{"row":37,"column":26},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":33,"state":"start","mode":"ace/mode/python"}},"timestamp":1686624434778,"hash":"bdcdf09a715ac9f4b58eb4dbca1a547fb490df8f"}